---
interface Props {
  options: Array<{
    label: string;
    url: string;
    disableTransition?: boolean;
  }>;
  activeOptionUrl: string;
  activeBackgroundColor?: string;
}

const {
  options,
  activeOptionUrl,
  activeBackgroundColor = '#800000'
} = Astro.props;

// Values in the code fence can be passed to the template <style> section.
//   We can also allow users to override colors by accepting additional props
const activeMenuOptionColor = '#faf9f6';
---

<ul class="menu">
  {
    options.map(({ label, url, disableTransition }) => (
      <li>
        <a
          class:list={['menu-item', { active: url === activeOptionUrl }]}
          href={`/${url}`}
          {...(disableTransition && { 'data-astro-reload': true })}>
          {label}
        </a>
      </li>
    ))
  }
</ul>

<button style={{ marginTop: '2rem', padding: '1rem' }}
  >Click to go to the Collections page</button
>

<script>
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    document
      .querySelector('button')
      ?.addEventListener('click', () => navigate('/collections'));
  });
</script>

<!-- Use the define:vars directive to pass values from a code fence to <script> or <style> tags -->
<style define:vars={{ activeBackgroundColor, activeMenuOptionColor }}>
  .menu {
    list-style-type: none;
    display: flex;
    flex-direction: column;

    .menu-item {
      display: block;
      text-decoration: none;
      font-size: 1.25rem;
      padding: 0.75rem 1rem;
      color: var(--brand-primary);

      &.active {
        background-color: var(--activeBackgroundColor);
        color: var(--activeMenuOptionColor);
      }
    }
  }
</style>
